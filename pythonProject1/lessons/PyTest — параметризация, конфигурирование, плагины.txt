PyTest — параметризация, конфигурирование, плагины
Параметризация тестов
PyTest позволяет запустить один и тот же тест с разными входными параметрами. Для этого используется декоратор @pytest.mark.parametrize(). Наш сайт доступен для разных языков. Напишем тест, который проверит, что для сайта с русским и английским языком будет отображаться ссылка на форму логина. Передадим в наш тест ссылки на русскую и английскую версию главной страницы сайта.

В @pytest.mark.parametrize() нужно передать параметр, который должен изменяться, и список значений параметра. В самом тесте наш параметр тоже нужно передавать в качестве аргумента. Обратите внимание, что внутри декоратора имя параметра оборачивается в кавычки, а в списке аргументов теста кавычки не нужны.

test_fixture7.py: 

import pytest
from selenium import webdriver

@pytest.fixture(scope="function")
def browser():
    print("\nstart browser for test..")
    browser = webdriver.Chrome()
    yield browser
    print("\nquit browser..")
    browser.quit()

@pytest.mark.parametrize('language', ["ru", "en-gb"])
def test_guest_should_see_login_link(browser, language):
    link = f"http://selenium1py.pythonanywhere.com/{language}/"
    browser.get(link)
    browser.find_element_by_css_selector("#login_link")
Запустите тест:

pytest -s -v test_fixture7.py
 Вы увидите, что запустятся два теста.  В названии каждого теста в квадратных скобках будет написан параметр, с которым он был запущен. Таким образом мы можем быстро и без дублирования кода увеличить количество проверок для похожих сценариев.



Можно задавать параметризацию также для всего тестового класса, чтобы все тесты в классе запустились с заданными параметрами. В таком случае отметка о параметризации должна быть перед объявлением класса: 

@pytest.mark.parametrize('language', ["ru", "en-gb"])
class TestLogin:
    def test_guest_should_see_login_link(self, browser, language):
        link = f"http://selenium1py.pythonanywhere.com/{language}/"
        browser.get(link)
        browser.find_element_by_css_selector("#login_link")
        # этот тест запустится 2 раза

    def test_guest_should_see_navbar_element(self, browser, language):
        # этот тест тоже запустится дважды
Дополнительно, полезный туториал из документации: Parametrizing fixtures and test functions
https://docs.pytest.org/en/latest/parametrize.html

Задание: параметризация тестов
Инопланетяне оставляют загадочные сообщения на Stepik в фидбеке задач на правильное решение. Мы смогли локализовать несколько url-адресов задач, где появляются кусочки сообщений. Ваша задача — реализовать автотест со следующим сценарием действий: 

открыть страницу 
ввести правильный ответ 
нажать кнопку "Отправить" 
дождаться фидбека о том, что ответ правильный 
проверить, что текст в опциональном фидбеке полностью совпадает с "Correct!"
Опциональный фидбек — это текст в черном поле, как показано на скриншоте: 



Правильным ответом на задачу в заданных шагах является число:

import time
import math

answer = math.log(int(time.time()))
Используйте маркировку pytest для параметризации и передайте в тест список ссылок в качестве параметров: 

https://stepik.org/lesson/236895/step/1
https://stepik.org/lesson/236896/step/1
https://stepik.org/lesson/236897/step/1
https://stepik.org/lesson/236898/step/1
https://stepik.org/lesson/236899/step/1
https://stepik.org/lesson/236903/step/1
https://stepik.org/lesson/236904/step/1
https://stepik.org/lesson/236905/step/1

Используйте осмысленное сообщение об ошибке в проверке текста, а также настройте нужные ожидания, чтобы тесты работали стабильно. 

В упавших тестах найдите кусочки послания. Тест должен падать, если текст в опциональном фидбеке не совпадает со строкой "Correct!" Соберите кусочки текста в одно предложение и отправьте в качестве ответа на это задание. 

Важно! Чтобы пройти это задание, дополнительно убедитесь в том, что у вас установлено правильное локальное время (https://time.is/ru/). Ответ для каждой задачи нужно пересчитывать отдельно, иначе они устаревают. 

The owls are not what they seem! OvO

import time
import math
from selenium import webdriver
import pytest
from selenium.webdriver.common.by import By
# Задание явных ожиданий реализуется с помощью инструментов WebDriverWait и expected_conditions
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

@pytest.fixture(scope="function")
def browser():
    print("\nstart browser for test..")
    browser = webdriver.Chrome()
    yield browser
    print("\nquit browser..")
    browser.quit()

@pytest.mark.parametrize("lesson", [
    '236895',
    '236896',
    '236897',
    '236898',
    '236899',
    '236903',
    '236904',
    '236905'
    ])
def test_guest_should_see_feedback_is_correct(browser, lesson):
    link = f'https://stepik.org/lesson/{lesson}/step/1'
    # открываем страницу
    browser.get(link)
    # Ответ для каждой задачи пересчитываем отдельно, иначе они устаревают:
    answer = str(math.log(int(time.time())))
    input_answer = WebDriverWait(browser, 10).until(
        EC.visibility_of_element_located((By.CLASS_NAME, "string-quiz__textarea"))
        )
    # вводим правильный ответ
    input_answer.send_keys(answer)

    button_send = WebDriverWait(browser, 10).until(
        EC.element_to_be_clickable((By.CLASS_NAME, "submit-submission"))
        )
    button_send.click()

    feedback = WebDriverWait(browser, 10).until(
        EC.visibility_of_element_located((By.CLASS_NAME, "smart-hints__feedback"))
        )

    assert feedback.text == "Correct!", f'Текст в поле фидбек отличается от ожидаемого! \nОжидаемый результат: Correct!\nФактический результат: {feedback.text}'
	
	**********************************************
	import pytest
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time
import math


links = [  # Список ссылок на тестируемые страницы
    'https://stepik.org/lesson/236895/step/1',
    'https://stepik.org/lesson/236896/step/1',
    'https://stepik.org/lesson/236897/step/1',
    'https://stepik.org/lesson/236898/step/1',
    'https://stepik.org/lesson/236899/step/1',
    'https://stepik.org/lesson/236903/step/1',
    'https://stepik.org/lesson/236904/step/1',
    'https://stepik.org/lesson/236905/step/1'
]

************************************
import pytest
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time
import math

@pytest.fixture(scope="function")
def browser():
    print("\nstart browser...")
    browser=webdriver.Chrome()
    yield browser
    print("\nquit browser...")
    browser.quit()


@pytest.mark.parametrize("stepik",["236895","236896","236897","236898","236899","236903","236904","236905"])
def test_answer_link(browser,stepik):
    link=f"https://stepik.org/lesson/{stepik}/step/1"
    browser.get(link)
    answer = str(math.log(int(time.time())))
    browser.implicitly_wait(5)
    input1 = browser.find_element_by_xpath("//textarea")
    input1.send_keys(answer)
    button = WebDriverWait(browser, 5).until( EC.element_to_be_clickable((By.CLASS_NAME, "submit-submission")))
    button.click()
    hint = WebDriverWait(browser,5).until(EC.visibility_of_element_located((By.TAG_NAME ,"pre")))
    hint_text = hint.text
    assert hint_text == "Correct!", \
        f"{hint_text}"

@pytest.fixture(scope='function')
def answer():
    """Фистура применяется к функции теста.
    :return: Возвращает результат формулы math.log(int(time.time()))
    :rtype: str
    """
    return str(math.log(int(time.time())))


class TestStepik:
    @classmethod
    def setup_class(cls):
        """Метод класса инициализирует вебдрайвер.
        Устанавливает неявное ожидание
        """
        cls.browser = webdriver.Chrome()
        cls.browser.implicitly_wait(5)
    
    @classmethod
    def teardown_class(cls):
        """Метод класса закрывает браузер
        """
        cls.browser.quit()
    
    @pytest.mark.parametrize('link', links)
    def test_stepik(self, link, answer):
        # Открывает страницу
        self.browser.get(link)
        # Ожидает появления элемента с тегом "textarea"
        textarea = WebDriverWait(self.browser, 5).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, "textarea"))
        )
        # Передаем ответ из фикстуры answer в поле ввода
        textarea.send_keys(answer)
        # Нажимаем кнопку
        self.browser.find_element_by_css_selector('button.submit-submission ').click()
        # Получаем текст элемента, подтверждающего правильность ответа
        feedback = self.browser.find_element_by_css_selector('pre.smart-hints__hint').text
        # Проверяем ответ
        assert feedback == 'Correct!'
		******************************************

import pytest
from selenium import webdriver
import time
import math


lst = []


@pytest.fixture(scope="function")
def browser():
    print("\nstart browser for test..")
    browser = webdriver.Chrome()
    yield browser
    print("\nquit browser..")
    browser.quit()
    print(' '.join(lst))


@pytest.mark.parametrize('i', [i for i in range(236895, 236906) if i not in[236900, 236901, 236902]])
def test_should_assert_answer(browser, i):
    link = f'https://stepik.org/lesson/{i}/step/1'
    browser.implicitly_wait(10)
    browser.get(link)
    browser.find_element_by_tag_name('textarea').send_keys(str(math.log(int(time.time()))))
    browser.find_element_by_css_selector('.submit-submission').click()
    element = browser.find_element_by_css_selector('.smart-hints__hint').text
    if element != 'Correct!':
        lst.append(element)
    assert element == "Correct!", 'waited the answer: Correct!'
	